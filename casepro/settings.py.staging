from __future__ import unicode_literals

# import our default settings
from settings_common import *
import os

DEBUG = False
TEMPLATE_DEBUG = DEBUG
COMPRESS_ENABLED = True

SITE_API_HOST = 'http://textit.staging.nyaruka.com/api/v1'
SITE_HOST_PATTERN = 'http://%s.upartners.staging.nyaruka.com'

HOSTNAME = 'upartners.staging.nyaruka.com'
ALLOWED_HOSTS = ['upartners.staging.nyaruka.com', '.upartners.staging.nyaruka.com']
SESSION_COOKIE_DOMAIN = 'upartners.staging.nyaruka.com'
SESSION_COOKIE_SECURE = False

# these guys will get email from sentry
ADMINS = ()

# set the mail settings, we send through gmail
SEND_EMAILS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = os.environ.get('EMAIL_USER', None)
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_USER', None)
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASSWORD', None)
EMAIL_USE_TLS = True

MANAGERS = ADMINS

# add gunicorn
INSTALLED_APPS = INSTALLED_APPS + ('gunicorn', 'raven.contrib.django.raven_compat',)

SENTRY_DSN = os.environ.get('RAVEN_DSN', 'MISSING_RAVEN_DSN')
RAVEN_CONFIG = {'dsn': SENTRY_DSN}

# static dir is different for staging
STATIC_URL = '/sitestatic/'
COMPRESS_URL = '/sitestatic/'

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

import dj_database_url
DATABASES = {}
DATABASES['default'] = dj_database_url.config()

# reuse our connections for up to 60 seconds
DATABASES['default']['CONN_MAX_AGE'] = 60
DATABASES['default']['ATOMIC_REQUESTS'] = True
DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql_psycopg2'

# no debug toolbar in prod
MIDDLEWARE_CLASSES = (
    'raven.contrib.django.raven_compat.middleware.SentryResponseErrorIdMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'reversion.middleware.RevisionMiddleware',
    'smartmin.middleware.AjaxRedirect',
    'dash.orgs.middleware.SetOrgMiddleware',
    'casepro.profiles.middleware.ForcePasswordChangeMiddleware'
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'root': {
        'level': 'INFO',
        'handlers': ['console', 'sentry'],
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
    },
    'handlers': {
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'celery.task': {
            'level': 'INFO',
            'handlers': ['console', 'sentry'],
            'propagate': False,
        },
        'casepro': {
            'level': 'INFO',
            'handlers': ['console', 'sentry'],
            'propagate': False,
        },
    },
}

# use our cache backend for sessions
SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
SESSION_CACHE_ALIAS = "default"

# trust connections that are coming in on this protocol
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'HTTPS')

# compress arguments
COMPRESS_CSS_HASHING_METHOD = 'content'
COMPRESS_OFFLINE = True
COMPRESS_OFFLINE_CONTEXT = dict(STATIC_URL=STATIC_URL, base_template='frame.html', debug=False, testing=False)

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.cache.RedisCache',
        'LOCATION': 'localhost:6379:17',
        'OPTIONS': {
            'CLIENT_CLASS': 'redis_cache.client.DefaultClient',
        }
    }
}

BROKER_URL = 'redis://localhost:6379/17'
CELERY_RESULT_BACKEND = BROKER_URL